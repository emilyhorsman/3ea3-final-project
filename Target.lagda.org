#+TITLE: Target Language
#+STARTUP: showall
#+OPTIONS: ':t
#+LATEX_COMPILER: lualatex -shell-escape
#+LATEX_HEADER: \usepackage{parskip}

* Frontmatter

#+begin_src agda2
module Target where

open import Data.Bool
open import Data.Fin
open import Data.Fin.Properties using (toℕ≤pred[n])
open import Data.Maybe
open import Data.Nat renaming (_<_ to _<ₙ_; _≤_ to _≤ₙ_; _+_ to _ℕ+_)
open import Data.Product
open import Data.Vec as Vec hiding (lookup)
open import Function using (const; _∘_; _$_; _ˢ_)
open import Relation.Binary.PropositionalEquality
open import Size
open ≡-Reasoning

open import Utility using (inc)

{- Z-notation for sums -}
Σ∶• : ∀{a b} (A : Set a) (B : A → Set b) → Set _
Σ∶• = Σ
infix -666 Σ∶•
syntax Σ∶• A (λ x → B) = Σ x ∶ A • B  -- \:
#+end_src

* Overview

Our target language will be comprised of an instruction set for a simple [[https://en.wikipedia.org/wiki/Random-access_machine#Refresher:_The_counter-machine_model][counter machine]].
A member of the target language is a list of instructions.
This machine consists of an unbounded number of ℕ-labelled registers and an instruction pointer.
Every register holds a natural number and is initially 0.
Registers do not need to be allocated.
Their default value is always 0.
Incrementing a register for the first time changes its value to 1.
We assume that register 0 is reserved.

| Instruction | Description                                                                |
| ~INCR r~    | Increments the value at register ~r~ and advances the instruction pointer. |
| ~DECR r~    | Decrements the value at register ~r~ and advances the instruction pointer. |
| ~JZ r t~    | Jumps to instruction ~t~ if the value at register ~r~ is 0.                |
| ~HALT~      | Halts execution.                                                           |

We need a way to execute a program in order to prove the correctness of a compiler targeting this language.

* Instruction Language

We'll define two initial types to give us semantic naming.

As said, our register labels are natural numbers.

#+begin_src agda2
RegisterLabel = ℕ
#+end_src

The instruction indices of our language are also natural numbers.
It would be convenient to gain correctness from dependent types by using ~Fin n~ where ~n~ is the length of the program.
This would make it impossible to produce a ~JZ~ instruction that jumped to an undefined instruction.
However, this makes defining and composing programs difficult.
Thus, our initial type will simply use ℕ.

#+begin_src agda2
InstructionIndex = ℕ
#+end_src agda2

Let's produce a data type to work with these instructions.

#+begin_src agda2
data Instruction : Set where
  INCR : RegisterLabel → Instruction
  DECR : RegisterLabel → Instruction
  JZ   : RegisterLabel → InstructionIndex → Instruction
  HALT : Instruction
#+end_src

A program will be a vector of instructions.

#+begin_src agda2
Program = Vec Instruction
#+end_src agda2

** Sample Programs

We need a register which always contains the value of 0.
All these sample programs assume that register 0 always contains 0.
No part of the program will touch register 0.
We can enforce this with types!

*** Clear a register

We use ~INCR 0 ∷ DECR 0~ as ~skip~.

#+begin_src agda2
program-clear-register : (r : RegisterLabel) → {pf : r > 0} → Vec Instruction 5
program-clear-register r = JZ r (suc (suc (suc zero))) ∷ DECR r ∷ JZ 0 zero ∷ INCR 0 ∷ DECR 0 ∷ []
#+end_src agda2

*** Count to three!

#+begin_src agda2
program-count-to-3 : (r : RegisterLabel) → {pf : r > 0} → Vec Instruction 9
program-count-to-3 r {pf} = program-clear-register r {pf} ++ INCR r ∷ INCR r ∷ INCR r ∷ HALT ∷ []
#+end_src

*** Count to infinity!

We can express non-terminating programs in our target language!

#+begin_src agda2
program-count-to-∞ : (r : RegisterLabel) → {pf : r > 0} → Vec Instruction 7
program-count-to-∞ r {pf} = program-clear-register r {pf} ++ INCR r ∷ JZ 0 5 ∷ []
#+end_src

* Execution

** Register Representation

Our register labels may not be contiguous and we have not required them to be pre-allocated.
Thus, we require a tree to represent our register label/value pairs.
Our tree will have homogeneous values (all ℕ).

#+begin_src agda2
open import Data.Nat.Properties using (<-isStrictTotalOrder)

RegLabelStrictTotalOrder = <-isStrictTotalOrder

open import Data.AVL RegLabelStrictTotalOrder as AVL hiding (lookup)

Registers = AVL.Tree (const ℕ)
#+end_src

Earlier we stated that registers are 0 by default and do not need to be pre-allocated.
Let's write an accessor for this to avoid dealing with sum types in the future.

#+begin_src agda2
lookup : RegisterLabel → Registers → ℕ
lookup label registers = fromMaybe 0 $ AVL.lookup label registers
#+end_src

** Execution State

The instruction set motivates three possible execution states.
/Final/ indicates that the instruction pointer and register state are now final and further simulation steps are idempotent.

| State     | Motivation                                                      | /Final/ |
| ~Running~ | We are able to execute from the current state.                  | NO      |
| ~Halted~  | We have executed a ~HALT~ instruction.                          | YES     |
| ~Crashed~ | The instruction pointer was advanced past the last instruction. | YES     |

#+begin_src
data State : Set where
  Running : State
  Halted  : State
  Crashed : State
#+end_src

** Simulation and Termination

Programs can jump to a previous instruction.
This means that programs may never terminate!
~[ JZ 0 0 ]~ should clearly never terminate given the semantics discussed so far.

Execution of the program does not reduce the execution to a structurally smaller subproblem.
Thus we cannot execute a program via induction on the program.
This leads to an invariant on our execution:

+ Inv₁ :: Execution of the program never modifies the length of the program or the definition of instructions comprising the program.

*** Trace

Instead, our simulation of a program given an initial configuration will consist of making a finite number of "observations" or steps.
Thus a single step of execution concerns itself with [[https://agda.readthedocs.io/en/latest/language/coinduction.html][/productivity/]].
We require a coinductive type which represents the execution trace of our program.
We can "observe" the execution of a program by destructing the coinductive type.

Our execution of a program requires knowing the current state of the registers and which instruction to execute next.
We can use a ~Fin n~ to represent the instruction pointer, where ~n~ is the length of the program.
This will ensure that we can never advance to an undefined instruction.
Further, this means that the length of the program should /parameterize/ the data type, not /index/ the data type.
This is because a constructor of our execution state should never change the program.
**Correctness remark!** Here we use the type system to guarantee that our execution implementation never advances to a state where the program is undefined.

#+begin_src agda2
record Configuration (n : ℕ) : Set where
  constructor ⟨_,_⟩
  field
    pointer   : Fin n
    registers : Registers

open Configuration
#+end_src

Now we must write our coinductive record for the trace of an execution.
We'll replace our previous ~State~ with one that holds a ~Configuration~ product and possibly a ~Trace~.
The ~Trace~ record has a single field: ~step~ (as in small-step semantics).

#+begin_src agda2
data State {i : Size} {|program| : ℕ} : Set

record Trace {i : Size} {|program| : ℕ} : Set where
  coinductive
  field
    step : {j : Size< i} → State {j} {|program|}

data State {i} {|program|} where
  Running : Configuration |program| → Trace {i} {|program|} → State
  Halted  : Configuration |program| → State
  Crashed : Configuration |program| → State

conf : {n : ℕ} → State → Configuration n
conf (Running c _) = c
conf (Halted c)    = c
conf (Crashed c)   = c

open Trace
#+end_src

** Small-step Instruction Semantics

We'll define a function ~small-step~ which returns a ~State~ member given an instruction and ~Configuration~.
There are four instructions to handle.
We will specify the postcondition for each case and compute the function.

#+begin_src agda2
small-step
  : ∀ {i : Size} {|program| : ℕ}
  → Instruction → Program |program| → Configuration |program|
  → State {i} {|program|}
#+end_src

We will have the following variables:

| Variable    | Type            |
| ~∣program∣~ | ~ℕ~             |
| ~instr~     | ~Instruction~   |
| ~program~   | ~Program~       |
| ~c~         | ~Configuration~ |

We'll specify the expressions ~E.i~, ~E.d~, ~E.j~, and ~E.h~ for each of the cases of ~instr~.
There are invariants that hold before and after ~E~: ~Inv₁~, ~Inv₂~, and ~Inv₃~.

+ Inv₂ :: All configurations must point to a defined instruction.
    ~∀ |program| : ℕ, c : Configuration |program| • pointer c < |program|~
+ Inv₃ :: All programs are non-empty.
    This necessarily follows from Inv₂.
    ~∀ |program| : ℕ, c : Configuration |program| • 0 < |program|~

*** ~INCR~: ~E.i~

~INCR~ should increment the value at the given register label and then advance the instruction pointer.
We have one more variable from pattern matching the ~Instruction~: ~label : RegisterLabel~.

1. We must advance to a ~Crashed~ state to satisfy ~Inv₂~ if this is the last instruction in the program.
2. We should increment our instruction pointer and advance to a ~Running~ state if this is not the last instruction in the program.
3. The register at ~label~ should be incremented.
4. No other register should be modified.

#+begin_src
R₁ ≡ 1 + pointer c = |program| ⇒ is-crashed E.i
R₂ ≡ 1 + pointer c < |program| ⇒ is-running E.i ∧ pointer (conf E.i) = 1 + pointer c
R₃ ≡ lookup label (registers (conf E.i)) = 1 + lookup label (registers c)
R₄ ≡ ∀ i : ℕ ∣ i ∈ registers c ∧ i ≠ label •
         lookup label (registers (conf E.i)) = lookup label (registers c)
#+end_src

The antecedents of ~R₁~ and ~R₂~ do not form a complete proposition.
However, they are sufficient given Inv₂ (which Agda confirms for us trivially below).
Note that we do not need to accept Inv₂ as an argument because we get it from the type of ~Configuration~.

#+begin_src agda2
pf-R₁-R₂-completeness
  : (|program| : ℕ)
  → (c : Configuration |program|)
  → toℕ (suc (pointer c)) ≤ₙ |program|
pf-R₁-R₂-completeness |program| c = toℕ≤pred[n] (suc (pointer c))
#+end_src

*** ~DECR~: ~E.d~

~DECR~ should decrement the value at the given register label and then advance the instruction pointer.
The story here is identical to ~INCR~ with the exception of R₃.
Noting that with subtraction over ℕ: ~zero - 1 = zero~.

#+begin_src
R₁ ≡ 1 + pointer c = |program| ⇒ is-crashed E.d
R₂ ≡ 1 + pointer c < |program| ⇒ is-running E.d ∧ pointer (conf E.d) = 1 + pointer c
R₃ ≡ lookup label (registers (conf E.d)) = lookup label (registers c) - 1
R₄ ≡ ∀ i : ℕ ∣ i ∈ registers c ∧ i ≠ label •
         lookup label (registers (conf E.d)) = lookup label (registers c)
#+end_src

*** ~JZ~: ~E.j~

~JZ~ should advance the instruction pointer to a given index if the given register holds a value of 0.
We have two more variables from pattern matching the ~Instruction~: ~label : RegisterLabel~ and ~target : InstructionIndex~.
The given instruction index is ℕ not ~Fin~ for reasons discussed earlier.
This means we must be cautious about holding Inv₂.

1. We must hold Inv₂.
   Advance to a ~Crashed~ state and do not change the configuration if the given index is out of bounds.
2. We must hold Inv₂.
   We must advance to a ~Crashed~ state if this is the last instruction in the program and the value at register ~label~ is not 0.
3. If the value at register ~label~ is not 0 and this is not the last instruction in the program then we must advance to a ~Running~ state and increment the instruction pointer.
4. No registers should be modified.
5. If the value at register ~label~ is 0 and ~target~ is valid then we must advance to a ~Running~ state and change the instruction pointer to ~target~.

#+begin_src
is_zero ≡ lookup label (registers c) = 0

R₁ ≡ target ≥ |program| ⇒ is-crashed E.j
R₂ ≡ ¬ is_zero ∧ 1 + pointer c = |program| ⇒ is-crashed E.j
R₃ ≡ ¬ is_zero ∧ 1 + pointer c < |program| ⇒ is-running E.j ∧ pointer (conf E.j) = 1 + pointer c
R₄ ≡ is_zero ∧ target < |program| ⇒ is-running E.j ∧ pointer (conf E.j) = target
R₅ ≡ registers (conf E.j) = registers c
#+end_src

*** ~HALT~: ~E.h~

The ~HALT~ instruction halts execution.
This means that we cannot observe a "next" state of an execution --- there is no next state.
We need a ~State~ member.
We cannot use ~Running~ since it includes a ~Trace~ member which would let us observe another state.
We are left with only ~Crashed~ or ~Halted~.
~Crashed~ has special meaning to us.
We want our state to be ~Halted~.

1. We must advance to a ~Halted~ state.
2. We should not change the instruction pointer.
   We must satisfy Inv₂.
   The instruction pointer is already referring to a ~HALT~ instruction so we know it is well-defined.
3. We must not modify the contents of the registers.

#+begin_src
R₁   ≡ is-halted E.h
R₂,₃ ≡ conf E.h = c
#+end_src

*** ~small-step~ Implementation

We'll write a helper function to map a function over a particular register.
This helper function must understand our register semantics (default value is 0) and thus use our earlier helper ~lookup~.

#+begin_src agda2
modify-registers : RegisterLabel → (ℕ → ℕ) → Registers → Registers
modify-registers label f registers =
  AVL.insert label (f $ lookup label registers) registers

_ : modify-registers 1 suc empty ≡ singleton 1 1
_ = refl

_ : modify-registers 1 suc (singleton 1 1) ≡ singleton 1 2
_ = refl
#+end_src

~small~ will produce a trace by executing a program with a given configuration.
We must define it now since some ~State~ members require a ~Trace~ member.
This will require mutual recursion.

#+begin_src agda2
small
  : ∀ {i : Size} {|program| : ℕ}
  → Vec Instruction |program| → Configuration |program|
  → Trace {i} {|program|}
step (small program conf@(⟨ pointer , _ ⟩)) =
  small-step (Vec.lookup pointer program) program conf
#+end_src

Finally, ~small-step~ is achieved by case splitting on each instruction and filling in ~E.{i,h,j,d}~.

~E.i~ and ~E.d~ have identical implementations save for the map given to ~modify-registers~.

#+begin_src agda2
next-conf-over-reg
  : {i : Size} → {n : ℕ}
  → (ℕ → ℕ)
  → RegisterLabel
  → Program n
  → Configuration n
  → State {i} {n}
next-conf-over-reg f label program c =
  maybe
    (λ ip → (Running ˢ (small program)) ⟨ ip , reg ⟩)
    (Crashed ⟨ pointer c , reg ⟩)
    (inc (pointer c))
  where
    reg : Registers
    reg = modify-registers label f (registers c)
#+end_src

#+begin_src agda2
small-step (INCR label) = next-conf-over-reg suc label
small-step (DECR label) = next-conf-over-reg Data.Nat.pred label
small-step (JZ x x₃) x₁ x₂ = {!!}
small-step HALT _ c = Halted c
#+end_src

*** Unit Tests

#+begin_src agda2
_ : small-step (INCR 0) (INCR 0 ∷ []) ⟨ zero , empty ⟩ ≡ Crashed ⟨ zero , singleton zero 1 ⟩
_ = refl

upTo : {|prog| : ℕ} → ℕ → State {∞} {|prog|} → State
upTo zero s = s
upTo (suc n) (Running _ s) = upTo n (step s)
upTo (suc n) s = s

p : Program 2
p = INCR 0 ∷ INCR 0 ∷ []

_ : step (small p ⟨ zero , empty ⟩) ≡
      Running ⟨ suc zero , singleton zero 1 ⟩ (small p ⟨ suc zero , singleton zero 1 ⟩)
_ = refl

_ : upTo 1 (step (small p ⟨ zero , empty ⟩)) ≡ Crashed ⟨ suc zero , singleton zero 2 ⟩
_ = refl

p₂ : Program 3
p₂ = INCR 0 ∷ INCR 0 ∷ HALT ∷ []

_ : upTo 2 (step (small p₂ ⟨ zero , empty ⟩)) ≡ Halted ⟨ suc (suc zero) , singleton zero 2 ⟩
_ = refl
#+end_src

*** Proving Correctness

**** ~INCR~

#+begin_src agda2
pf-R₃-incr
  : (n : ℕ)
  → (ip : Fin n)
  → (program : Program n)
  → (label : RegisterLabel)
  → (pf : inc ip ≡ nothing)
  → lookup label (registers (conf (small-step (INCR label) program ⟨ ip , AVL.empty ⟩)))
      ≡ suc (lookup label (registers ⟨ ip , AVL.empty ⟩))
pf-R₃-incr n ip program label pf =
  begin
    lookup label (registers (conf (small-step (INCR label) program ⟨ ip , AVL.empty ⟩)))
  ≡⟨ {!!} ⟩
    suc (lookup label AVL.empty)
  ∎
#+end_src

#+begin_src agda2
is-crashed : {n : ℕ} → State {|program| = n} → Bool
is-crashed (Crashed _) = true
is-crashed _ = false

pf-R₁-incr
  : (n : ℕ)
  → (c : Configuration n)
  → (program : Program n)
  → (nonempty : n > 0)
  → (antecedent : toℕ (suc (pointer c)) ≡ n)
  → (label : RegisterLabel)
  → is-crashed (small-step (INCR label) program c) ≡ true
  --→ Σ c′ ∶ Configuration n • small-step (INCR label) program c ≡ Crashed c′
pf-R₁-incr (suc n) c program nonempty antecedent label = 
  begin
    is-crashed (small-step (INCR label) program c)
  ≡⟨ {!x!} ⟩
    is-crashed (Crashed ⟨ pointer c , modify-registers label suc (registers c) ⟩)
  ≡⟨ refl ⟩
    true
  ∎
  where
    x = inc (pointer c) ≡ nothing
#+end_src

**** ~HALT~

Agda trivially confirms all the postconditions for ~HALT~/~E.h~.

#+begin_src agda2
pf-requirements-halt
  : {n : ℕ}
  → {c : Configuration n}
  → {program : Program n}
  → small-step HALT program c ≡ Halted c
pf-requirements-halt = refl
#+end_src
